{"version":3,"file":"main.813b6ebc5dec6caa95a3.hot-update.js","sources":["webpack:///./src/assets/ClosePassword.tsx","webpack:///./src/assets/DropUpIcon.tsx","webpack:///./src/assets/ShowPassword.tsx","webpack:///./src/components/Input/Input.tsx","webpack:///./src/components/Select/Select.tsx"],"sourcesContent":["import React from 'react';\n\nexport const ClosePassword = () => {\n    return (\n        <div>\n            <svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" clip-rule=\"evenodd\">\n                <path d=\"M8.137 15.147c-.71-.857-1.146-1.947-1.146-3.147 0-2.76 2.241-5 5-5 1.201 0 2.291.435 3.148 1.145l1.897-1.897c-1.441-.738-3.122-1.248-5.035-1.248-6.115 0-10.025 5.355-10.842 6.584.529.834 2.379 3.527 5.113 5.428l1.865-1.865zm6.294-6.294c-.673-.53-1.515-.853-2.44-.853-2.207 0-4 1.792-4 4 0 .923.324 1.765.854 2.439l5.586-5.586zm7.56-6.146l-19.292 19.293-.708-.707 3.548-3.548c-2.298-1.612-4.234-3.885-5.548-6.169 2.418-4.103 6.943-7.576 12.01-7.576 2.065 0 4.021.566 5.782 1.501l3.501-3.501.707.707zm-2.465 3.879l-.734.734c2.236 1.619 3.628 3.604 4.061 4.274-.739 1.303-4.546 7.406-10.852 7.406-1.425 0-2.749-.368-3.951-.938l-.748.748c1.475.742 3.057 1.19 4.699 1.19 5.274 0 9.758-4.006 11.999-8.436-1.087-1.891-2.63-3.637-4.474-4.978zm-3.535 5.414c0-.554-.113-1.082-.317-1.562l.734-.734c.361.69.583 1.464.583 2.296 0 2.759-2.24 5-5 5-.832 0-1.604-.223-2.295-.583l.734-.735c.48.204 1.007.318 1.561.318 2.208 0 4-1.792 4-4z\" />\n            </svg>\n        </div>\n    );\n};\n","import React from 'react';\n\nexport const UpIcon = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 24 24\">\n            <path d=\"M0 16.67l2.829 2.83 9.175-9.339 9.167 9.339 2.829-2.83-11.996-12.17z\" />\n        </svg>\n    );\n};\n","import React from 'react';\n\nexport const ShowPassword = () => {\n    return (\n        <div>\n            <svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" clip-rule=\"evenodd\">\n                <path d=\"M12.01 20c-5.065 0-9.586-4.211-12.01-8.424 2.418-4.103 6.943-7.576 12.01-7.576 5.135 0 9.635 3.453 11.999 7.564-2.241 4.43-6.726 8.436-11.999 8.436zm-10.842-8.416c.843 1.331 5.018 7.416 10.842 7.416 6.305 0 10.112-6.103 10.851-7.405-.772-1.198-4.606-6.595-10.851-6.595-6.116 0-10.025 5.355-10.842 6.584zm10.832-4.584c2.76 0 5 2.24 5 5s-2.24 5-5 5-5-2.24-5-5 2.24-5 5-5zm0 1c2.208 0 4 1.792 4 4s-1.792 4-4 4-4-1.792-4-4 1.792-4 4-4z\" />\n            </svg>\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport './Input.css';\nimport { ShowPassword } from '../../assets/ShowPassword';\nimport { ClosePassword } from '../../assets/ClosePassword';\n\nexport interface InputProps extends React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {\n    value?: string;\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    placeholder?: string;\n    autoFocus?: boolean;\n    disabled?: boolean;\n    name?: string;\n    type?: 'email' | 'password' | 'text';\n    className?: string;\n    adornment?: string;\n    ornament?: string;\n}\n\nexport const Input: React.FunctionComponent<InputProps> = (props) => {\n    const { className, placeholder, type, adornment, ornament, ...rest } = props;\n    const [showPassword, setShowPassword] = useState(false);\n\n    const togglePasswordVisibility = () => {\n        setShowPassword((prevState) => !prevState);\n    };\n\n    const inputType = type === 'password' ? (showPassword ? 'text' : 'password') : type;\n\n    const inputClassName = `inputField ${className} ${type === 'password' ? 'password' : ''}`;\n    // Set Defalut Values\n    let _placeholder: string = 'Input Field';\n    let _type: string = 'text';\n    // OverWrite the Default Values\n    if (placeholder) _placeholder = placeholder;\n    if (type) _type = type;\n\n    return (\n        <>\n            {type === 'password' && (\n                <>\n                    <div className={`inputField ${className}`}>\n                        <input {...rest} type={inputType} placeholder={_placeholder} />\n                        <span className=\"togglePasswordVisibility\" onClick={togglePasswordVisibility}>\n                            {showPassword ? <ClosePassword /> : <ShowPassword />}\n                        </span>\n                    </div>\n                </>\n            )}\n            {type !== 'password' && !adornment && !ornament && (\n                <>\n                    <div className={`inputField ${className}`}>\n                        <input {...rest} type={inputType} placeholder=\"&nbsp;\" type={inputType} />\n                        <span className=\"togglePlaceholderVisibility\">{placeholder}</span>\n                    </div>\n                </>\n            )}\n            {type !== 'password' && adornment && (\n                <>\n                    <div className={`inputField ${className}`}>\n                        <span className=\"InputAddOn-item\">{adornment}</span>\n                        <input className=\"InputAddOn-field\" placeholder={placeholder} {...rest} type={inputType} />\n                    </div>\n                </>\n            )}\n            {type !== 'password' && ornament && (\n                <>\n                    <div className={`inputField ${className}`}>\n                        <input className=\"InputAddOn-field\" placeholder={placeholder} {...rest} type={inputType} />\n                        <span className=\"InputAddOn-item\">{ornament}</span>\n                    </div>\n                </>\n            )}\n        </>\n    );\n};\n","import React, { ChangeEvent, InputHTMLAttributes, Ref, useEffect, useRef, useState } from 'react';\nimport { Icon } from '../../assets/DropdownIcon';\nimport { UpIcon } from '../../assets/DropUpIcon';\nimport { CloseIcon } from '../../assets/CloseIcon';\nimport './Select.css';\n\nexport interface SelectProps extends React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {\n    onChange?: any;\n    placeholder?: string;\n    disabled?: boolean;\n    position?: string;\n    name?: string;\n    options?: optionType[];\n    isMulti?: boolean;\n    isSearchable?: boolean;\n}\n\nexport interface optionType {\n    value: string;\n    label: string;\n}\n\nexport interface eType {\n    target: { value: React.SetStateAction<string> };\n}\n\nexport interface itemType {\n    value: string;\n}\n\nexport const Select: React.FunctionComponent<SelectProps> = ({ isMulti, options, placeholder, isSearchable, onChange }) => {\n    const [showMenu, setShowMenu] = useState<boolean>(false);\n    const [searchValue, setSearchValue] = useState<string>('');\n    const searchRef = useRef<HTMLInputElement>();\n    const inputRef = useRef<any>();\n    const [selectedValue, setSelectedValue] = useState<any>(isMulti ? [] : null);\n\n    useEffect(() => {\n        const handler = (e: { target: any }) => {\n            if (inputRef.current && !inputRef.current.contains(e.target)) {\n                setShowMenu(false);\n            }\n        };\n        window.addEventListener('click', handler);\n        return () => {\n            window.removeEventListener('click', handler);\n        };\n    });\n\n    useEffect(() => {\n        setSearchValue('');\n        if (showMenu && searchRef.current) {\n            searchRef.current.focus();\n        }\n    }, [showMenu]);\n\n    // Here OnSearch function is used to track the latest value of the search\n    const onSearch = (e: { target: HTMLInputElement }) => {\n        setSearchValue(e.target.value);\n    };\n\n    // Here getOptions is used to configure the options passed through props\n    const getOptions = () => {\n        if (!searchValue) {\n            return options;\n        }\n        return options.filter((option: any) => option.toLowerCase().indexOf(searchValue.toLowerCase()) >= 0);\n    };\n\n    const handleInputClick = () => {\n        setShowMenu(!showMenu);\n    };\n\n    // Here getDisplay is used to check if we have to show placeholder or not\n    const getDisplay = () => {\n        if (!selectedValue || selectedValue.length === 0) {\n            console.log('inside if', selectedValue);\n            return placeholder;\n        }\n        if (isMulti) {\n            return (\n                <div className=\"dropdown-tags\">\n                    {selectedValue.map((option: any) => (\n                        <div key={option} className=\"dropdown-tag-item\">\n                            {option}\n                            <span onClick={(e) => onTagRemove(e, option)} className=\"dropdown-tag-close\">\n                                <CloseIcon />\n                            </span>\n                        </div>\n                    ))}\n                </div>\n            );\n        }\n        return selectedValue;\n    };\n\n    const removeOption = (option: optionType) => {\n        return selectedValue.filter((item: itemType) => item !== option);\n    };\n    const onTagRemove = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>, option: optionType) => {\n        e.stopPropagation();\n        const newValue = removeOption(option);\n        setSelectedValue(newValue);\n        onChange(newValue);\n    };\n\n    const onItemClick = (option: optionType) => {\n        let newValue;\n        if (isMulti) {\n            if (selectedValue.findIndex((item: itemType) => item === option) >= 0) {\n                newValue = removeOption(option);\n            } else {\n                newValue = [...selectedValue, option];\n            }\n        } else {\n            newValue = option;\n        }\n        setSelectedValue(newValue);\n        onChange(newValue);\n    };\n\n    const isSelected = (option: optionType) => {\n        if (isMulti) {\n            return selectedValue.filter((item: itemType) => item === option).length > 0;\n        }\n        if (!selectedValue) {\n            return false;\n        }\n        return selectedValue === option;\n    };\n\n    return (\n        <>\n            <div className=\"dropdown-container\">\n                <div ref={inputRef} className=\"dropdown-input\" onClick={handleInputClick}>\n                    <div className=\"dropdown-selected-value\">{getDisplay()}</div>\n                    <div className=\"dropdown-tools\">\n                        <div className=\"dropdown-tool\">{showMenu ? <UpIcon /> : <Icon />}</div>\n                    </div>\n                    {showMenu && (\n                        <div className=\"dropdown-menu\">\n                            {isSearchable && (\n                                <div className=\"search-box\">\n                                    <input onChange={onSearch} value={searchValue} ref={searchRef} />\n                                </div>\n                            )}\n                            {options ? (\n                                getOptions().map((option: any) => (\n                                    <div onClick={() => onItemClick(option)} key={option} className={`dropdown-item ${isSelected(option) && 'selected'}`}>\n                                        {option}\n                                    </div>\n                                ))\n                            ) : (\n                                <div>Please add options</div>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </div>\n        </>\n    );\n};\n"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AARA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AANA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AARA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAeA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;A","sourceRoot":""}